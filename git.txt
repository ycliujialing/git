分布式版本控制工具 VS 集中式版本控制工具
(****)git分支  分支特性 分支创建  分支合并  代码合并冲突
Idea 集成Git

//git是一个分布式版本控制系统(个人开发过渡到团队协作)
版本控制工具：集中式版本控制工具  和 分布式版本工作工具
集中式版本控制工具：致命缺点：中央服务器的单点故障(服务器死机,代码没有了)
分布式版本控制工具: 分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库
                   每一个客户端动手一个
                    优点：服务器断网的情况下也可以进行开发
					      每一个客户端保存的也都是整个完整的项目
						  
			代码托管中心：是基于网络服务器的远程代码仓库，一般我们简称为远程库
			            分类：局域网  GitLab
						      互联网  GitHub 和  Gitee码云
git的常用命令：git config --global user.name 用户名
               git config --global user.email 邮箱
			   git init  初始化本地库
			   git status 查看本地库状态
			   git add 文件名 添加暂停区
			   git rm --cached 删除的文件名  将文件从暂停区中删除
			   git commit -m"日志信息(第一次提交)" 文件名 提交到本地仓库
			   git reflog  查看版本信息
			   git log  查看版本详细信息
			   git reset -hard 版本编号   版本穿梭
git分支：
   什么是分支：一个分支就是一个单独的赋值(底层是指针的引用)
   分支的好处：同时并行推进多个功能开发 提高开发效率
               各个分支在开发过程中，如何一个分支开发失败，不会对其他分支有任何影响
    分支的操作：
	           git branch 分支名   创建分支
			   git branch -v       查看分支
			   git checkout 分支名 切换分支
			   git  merge 分支名   把指定的分支合并到当前分支上
			   冲突合并：两个分支在同一个文件的同一位置有两套完全不同的修改，git无法决定使用哪一个 必须由人决定

================GitHub=============
创建远程库
  创建远程库别名
  git remote -v 查看别名
  https://github.com/ycliujialing/git.git
  git remote add 别名 github源辰库的地址
代码推送 Push
  git push 别名(或链接)  分支(master) 
代码拉去 Pull
  git pull 别名(或链接)  分支(master)
代码克隆 Clone
SSH免密登录
Idea继承GitHub
================gitee码云==========
码云创建源辰库
Idea集成Gitee
码云链接GitHub进行代码的复制和迁移
=================GitLab===========
gitLab服务器的搭建和部署
Idea集成GitLab


1111111111111111111111
